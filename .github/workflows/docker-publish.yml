name: Docker Build, Test and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: backend
            dockerfile: ./backend/Dockerfile
            image: ${{ secrets.DOCKER_USERNAME }}/pet-accessories-backend
            context: ./backend
            test_port: 5000
            health_check_endpoint: /api/health
          - service: frontend
            dockerfile: ./frontend/Dockerfile
            image: ${{ secrets.DOCKER_USERNAME }}/pet-accessories-frontend
            context: ./frontend
            test_port: 80
            health_check_endpoint: /

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to Docker Hub
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # Build image for testing
      - name: Build test image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          load: true  # Load image locally for testing
          tags: ${{ matrix.image }}:test
          cache-from: type=registry,ref=${{ matrix.image }}:buildcache
          build-args: |
            NODE_ENV=test

      # Test the image
      - name: Test ${{ matrix.service }} image
        run: |
          # Start the container
          docker run -d \
            --name test-${{ matrix.service }} \
            -p ${{ matrix.test_port }}:${{ matrix.test_port }} \
            ${{ matrix.image }}:test

          # Wait for container to be ready
          echo "Waiting for container to be ready..."
          sleep 10

          # Check if container is running
          if [ "$(docker inspect -f {{.State.Running}} test-${{ matrix.service }})" != "true" ]; then
            echo "Container is not running"
            docker logs test-${{ matrix.service }}
            exit 1
          fi

          # Health check
          echo "Performing health check..."
          HEALTH_CHECK_URL="http://localhost:${{ matrix.test_port }}${{ matrix.health_check_endpoint }}"
          MAX_RETRIES=5
          RETRY_COUNT=0

          until curl -s -f $HEALTH_CHECK_URL || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Health check failed, retrying..."
            RETRY_COUNT=$((RETRY_COUNT+1))
            sleep 5
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Health check failed after $MAX_RETRIES attempts"
            docker logs test-${{ matrix.service }}
            exit 1
          fi

          echo "Container health check passed"

          # Run service-specific tests
          case "${{ matrix.service }}" in
            backend)
              # Test backend endpoints
              curl -s -f "http://localhost:${{ matrix.test_port }}/api/products" || exit 1
              ;;
            frontend)
              # Test if frontend serves HTML
              curl -s -f "http://localhost:${{ matrix.test_port }}" | grep "<html" || exit 1
              ;;
          esac

          # Check container logs for errors
          echo "Checking container logs for errors..."
          if docker logs test-${{ matrix.service }} 2>&1 | grep -i "error"; then
            echo "Found errors in container logs"
            exit 1
          fi

      # Build and push final image if tests pass
      - name: Build and push
        if: success() && github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ matrix.image }}:buildcache
          cache-to: type=registry,ref=${{ matrix.image }}:buildcache,mode=max

  # Add health endpoint to backend
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}:test
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  cleanup:
    needs: [build-and-test, security-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clean up test containers
        run