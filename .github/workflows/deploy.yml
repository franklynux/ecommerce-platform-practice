name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: projects/pet-accessories-backend
  ECR_REPOSITORY_FRONTEND: projects/pet-accessories-backend
  ECS_SERVICE: ecommerce-webapp
  ECS_CLUSTER: myAppCluster
  AWS_ACCOUNT_ID: '014498645423'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package.json
          
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm ci
        
      - name: Run Backend Tests
        working-directory: backend
        run: npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test-secret
          NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
          
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run Frontend Tests
        working-directory: frontend
        run: npm test
        env:
          CI: true

  deploy:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
                    -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest \
                    -f docker/Dockerfile.backend .
        
        # Push Backend images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push Frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
                    -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest \
                    -f docker/Dockerfile.frontend .
        
        # Push Frontend images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Force new deployment
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                              --service ${{ env.ECS_SERVICE }} \
                              --force-new-deployment
        
        echo "Deployment started... Waiting for service to stabilize..."
        aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
            
    - name: Deployment Status
      run: |
        if [ $? -eq 0 ]; then
          echo "Deployment completed successfully!"
        else
          echo "Deployment failed!"
          exit 1
        fi