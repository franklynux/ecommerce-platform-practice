name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: projects/pet-accessories-backend
  ECR_REPOSITORY_FRONTEND: projects/pet-accessories-frontend  
  ECS_SERVICE: ecommerce-webapp
  ECS_CLUSTER: myAppCluster
  AWS_ACCOUNT_ID: '014498645423'
  ECS_TASK_DEFINITION: .aws/task-definition.json

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package.json
          
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm ci
        
      - name: Run Backend Tests
        working-directory: backend
        run: npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test-secret
          NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
          
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run Frontend Tests
        working-directory: frontend
        run: npm test
        env:
          CI: true

  deploy:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Create runtime variables for ECS
    - name: Set environment variables
      run: |
        echo "NGINX_PROXY_TEMP_PATH=/tmp/nginx/proxy_temp" >> $GITHUB_ENV
        echo "NGINX_CLIENT_TEMP_PATH=/tmp/nginx/client_temp" >> $GITHUB_ENV
        echo "NGINX_FASTCGI_TEMP_PATH=/tmp/nginx/fastcgi_temp" >> $GITHUB_ENV
        echo "NGINX_UWSGI_TEMP_PATH=/tmp/nginx/uwsgi_temp" >> $GITHUB_ENV
        echo "NGINX_SCGI_TEMP_PATH=/tmp/nginx/scgi_temp" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV

    - name: Build, tag, and push Backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Backend with environment variables
        docker build \
          --build-arg NODE_ENV=${{ env.NODE_ENV }} \
          --build-arg MONGODB_URI=${{ secrets.MONGODB_URI }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest \
          -f docker/Dockerfile.backend .
        
        # Push Backend images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        echo "BACKEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Build, tag, and push Frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Frontend with environment variables
        docker build \
          --build-arg NGINX_PROXY_TEMP_PATH=${{ env.NGINX_PROXY_TEMP_PATH }} \
          --build-arg NGINX_CLIENT_TEMP_PATH=${{ env.NGINX_CLIENT_TEMP_PATH }} \
          --build-arg NGINX_FASTCGI_TEMP_PATH=${{ env.NGINX_FASTCGI_TEMP_PATH }} \
          --build-arg NGINX_UWSGI_TEMP_PATH=${{ env.NGINX_UWSGI_TEMP_PATH }} \
          --build-arg NGINX_SCGI_TEMP_PATH=${{ env.NGINX_SCGI_TEMP_PATH }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest \
          -f docker/Dockerfile.frontend .
        
        # Push Frontend images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        echo "FRONTEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition my-app \
          --query taskDefinition > task-definition.json    

    # Update ECS task definition
    - name: Fill in the new image IDs in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: frontend
        image: ${{ env.FRONTEND_IMAGE }}
        environment-variables: |
          NGINX_PROXY_TEMP_PATH=${{ env.NGINX_PROXY_TEMP_PATH }}
          NGINX_CLIENT_TEMP_PATH=${{ env.NGINX_CLIENT_TEMP_PATH }}
          NGINX_FASTCGI_TEMP_PATH=${{ env.NGINX_FASTCGI_TEMP_PATH }}
          NGINX_UWSGI_TEMP_PATH=${{ env.NGINX_UWSGI_TEMP_PATH }}
          NGINX_SCGI_TEMP_PATH=${{ env.NGINX_SCGI_TEMP_PATH }}

    - name: Update backend container in task definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container-name: backend
        image: ${{ env.BACKEND_IMAGE }}
        environment-variables: |
          NODE_ENV=${{ env.NODE_ENV }}
          PORT=5000

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
            
    - name: Deployment Status
      run: |
        if [ $? -eq 0 ]; then
          echo "Deployment completed successfully!"
        else
          echo "Deployment failed!"
          exit 1
        fi