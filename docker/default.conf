upstream backend_servers {
    server backend:5000;  # Use service name from docker-compose/ECS
    keepalive 32;  # Keep connections alive
}

server {
    listen 80;
    listen [::]:80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://api.* http://backend:5000;" always;
    
    # API proxy
    location /api/ {
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # Error handling
        proxy_intercept_errors on;
        error_page 404 = @notfound;
        error_page 502 503 504 = @backend_down;
    }

    # Health check endpoint
    location /health.txt {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    # Static file handling
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, no-transform";
        access_log off;
        try_files $uri =404;
    }

    # SPA fallback
    location / {
        try_files $uri $uri/ /index.html;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    # Custom error handlers
    location @notfound {
        return 404 '{"status":"error","message":"Not Found"}';
    }

    location @backend_down {
        return 503 '{"status":"error","message":"Backend Service Unavailable"}';
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
}