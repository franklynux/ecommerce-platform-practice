# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy root package files
COPY package*.json ./
COPY frontend/package*.json ./frontend/

# Install dependencies using workspace
RUN npm ci

# Copy frontend source
COPY frontend ./frontend

WORKDIR /app/frontend

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Install necessary utilities
RUN apk add --no-cache curl

# Remove default nginx static files
RUN rm -rf /usr/share/nginx/html/*

# Create necessary directories with proper permissions
RUN mkdir -p /var/cache/nginx \
             /var/log/nginx \
             /var/run \
             /tmp/nginx/client_temp \
             /tmp/nginx/proxy_temp \
             /tmp/nginx/fastcgi_temp \
             /tmp/nginx/uwsgi_temp \
             /tmp/nginx/scgi_temp \
             /usr/share/nginx/html \
    && chmod -R 755 /var/cache/nginx \
    && chmod -R 755 /var/log/nginx \
    && chmod -R 755 /var/run \
    && chmod -R 755 /tmp/nginx \
    && chmod -R 755 /usr/share/nginx/html

# Copy built assets from builder stage
COPY --from=build /app/frontend/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/conf.d/default.conf

# Create health check file
RUN echo "OK" > /usr/share/nginx/html/health.txt \
    && chmod 644 /usr/share/nginx/html/health.txt

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:80/health.txt || exit 1

EXPOSE 80

# Environment variables for nginx configuration
ENV NGINX_ENTRYPOINT_QUIET_LOGS=1 \
    NGINX_PROXY_TEMP_PATH=/tmp/nginx/proxy_temp \
    NGINX_CLIENT_TEMP_PATH=/tmp/nginx/client_temp \
    NGINX_FASTCGI_TEMP_PATH=/tmp/nginx/fastcgi_temp \
    NGINX_UWSGI_TEMP_PATH=/tmp/nginx/uwsgi_temp \
    NGINX_SCGI_TEMP_PATH=/tmp/nginx/scgi_temp

CMD ["nginx", "-g", "daemon off;"]