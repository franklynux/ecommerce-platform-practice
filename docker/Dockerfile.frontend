# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy root package files
COPY package*.json ./
COPY frontend/package*.json ./frontend/

# Install dependencies using workspace
RUN npm ci

# Copy frontend source
COPY frontend ./frontend

WORKDIR /app/frontend

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Install necessary utilities
RUN apk add --no-cache curl

# Remove default nginx static files
RUN rm -rf /usr/share/nginx/html/*

# Copy built assets from builder stage
COPY --from=build /app/frontend/dist /usr/share/nginx/html

# Create directories with proper permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /var/run \
    && chown -R nginx:nginx /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Create writable directories for nginx
RUN mkdir -p /var/run/nginx \
    && chown -R nginx:nginx /var/run/nginx \
    && chmod -R 755 /var/run/nginx

# Create health check file
RUN echo "OK" > /usr/share/nginx/html/health.txt \
    && chown nginx:nginx /usr/share/nginx/html/health.txt

# Make nginx.conf writable for entrypoint scripts
RUN chmod 644 /etc/nginx/conf.d/default.conf \
    && chown -R nginx:nginx /etc/nginx/conf.d/

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:80/health.txt || exit 1

EXPOSE 80

# Use modified command to ensure proper permissions
CMD ["nginx", "-g", "daemon off;"]